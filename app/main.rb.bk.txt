class ENTROTHPIC_EXISTENCE
  #F(n) = [ 3.217 - 3.218 ] / [ pi * r / cube_root(pi) ] - Beta(alpha(3,b))
  def function(n,r)#n is an array
    [(n[1] + n[0]) / phi(r) + 3] + Beta(Alpfa(n[0],n[-1],r),ENTROPY_E() + n[1],Math::PI * Math::cbrt(Math::E))
  end
  #3,b = 312 / pi ^ r ^ e + i - 312[DLTA],3,2,Alpfa{3+i-a, 3-i+d, 3+b-e} = 0..inf.
  def Alpfa(n_1,n_m,r) #n_1 => n[0], and n_m => n[-1]
    return ( n_1 * n_m ) / Math::PI ** r ** Math::E + i() + ( n_1 * n_m )
  end

  def ENTROPY_E()
    er = Math::E
    er = Math::PI * Math::cbrt(er)
  end

  def Beta(r,n_1,n_2)
    [3 + i() + n_2, 3 + i() + n_1, 3 + n_2 - Math::E]
  end

  def i()
    i = 3 + Math::E - Math::PI ^ (Math::PI * Math::cbrt(Math::E))
    i = (12 % Math::E) / i
  end

  #[ pi * r / cube_root(pi) ]  => phi()
  #E= mc^2 if we say m = m * G where G = phi() + 0.1...
  #G = m / sqrt(c) * E
  def phi(x)
    return (Math::PI * x) / (Math.cbrt(Math::PI))
  end

  #e/x = 3.718346 * i + e / 33x / z - phi
  #Return if e/x > inf. 
  def e_i(x,z,r)
    e  = x / e
    e = e * (phi(r) + Math::PI) * i() + e / 33 * x / z - phi(i())
  end
end

def allotment_plotter(x,r)
  resultant = x - resultant * r
  resultant += x + r
  return resultant
  r = r + x
  resultant = ( x + resultant + r )* 10
end
$new_way = ENTROTHPIC_EXISTENCE.new
#e' = ( 321 - 312 + [phi() / pi] ) * t / implicative_e - 312 + A â€¦ B
def evolution_rot(ary, t)
  e = [0]
  e << [ary[0] + ary[1], (($new_way.phi(ary[1]) ).to_i % t / ary[0]).to_i , ary[1]] + ary
  return e# unless e != nil
end

def d_e(ary,t)
  e = evolution_rot(ary,t)
  a = rand() * 10 % e[1].size
  e = (ary[a] + 1) % ary.size
  return e
end

#stock
def s()
  return 1
end

#2 doesn't do anything but set a leaf

#0 is mismatched or missing data

#branch
def r()
  return 3
end

#change from 1 to 3 / vice verse
def c(arg1,arg2)
  return 2 if arg1 != arg2
  return 3 if arg1 == arg2
end

def rando_assign(a,t)
  random = a.size %  d_e(a,t) + 0.2
  args = a[random.to_i]
end
#args is not an array
def interpreter(args, pos)
  return {x: 200 + (pos[0] + 20), y: (pos[1])+ 100, w: 33, h: 33, path: 'sprites/square/blue.png'} if args == 1
  return {x: 180 + pos[0], y: (pos[1]) + 100, w: 33, h: 33, path: "sprites/square/red.png"} if args == 3
  return {x: 200 +(2* pos[0] + 13), y: pos[1]  + 100, w:33, h: 33, path: "sprites/circle/green.png"} if args == 2
end

def generator(r)
  ae ||= []
  puts(r,ae)
  ae = $new_way.Alpfa(Math.log((Math::E * 3 + r - 1),Math::E),Math.log((Math::E / 3 - r + 1),Math::E),Math.log((Math::E ^ 1/3 + r - 1),Math::E))
  # generator(ae[-1]) unless ae.size() == 2
end

def normalizer(ary)
  for i in 0...ary.size()
    ary[i] *= 100
    ary[i] = ary[i].to_i()
  end
  return ary
end

def defaults_sine_wave_for
  { frequency: 440, sample_rate: 48000 }
end


def defaults_queue_sine_wave
  { frequency: 440, duration: 60, gain: 1.0, fade_out: false, queue_in: 0 }
end

def defaults_new_audio_state
  { frequency: 440, duration: 60, gain: 1.0, fade_out: false, queue_in: 0 }
end

def sine_wave_for opts = {}
opts = defaults_sine_wave_for.merge opts
frequency   = opts[:frequency]
sample_rate = opts[:sample_rate]
period_size = (sample_rate.fdiv frequency).ceil
period_size.map_with_index do |i|
  Math::sin((2.0 * Math::PI) / (sample_rate.to_f / frequency.to_f) * i)
end.to_a
end

def queue_sine_wave args, opts = {}
      opts        = defaults_queue_sine_wave.merge opts
      frequency   = opts[:frequency]
      sample_rate = 48000

      sine_wave = sine_wave_for frequency: frequency, sample_rate: sample_rate
      args.state.sine_waves[frequency] ||= sine_wave_for frequency: frequency, sample_rate: sample_rate

      proc = lambda do
        generate_audio_data args.state.sine_waves[frequency], sample_rate
      end

      audio_state = new_audio_state args, opts
      audio_state[:input] = [1, sample_rate, proc]
      queue_audio args, audio_state: audio_state, wave: sine_wave
end

def new_audio_state args, opts = {}
opts        = defaults_new_audio_state.merge opts
decay_rate  = 0
decay_rate  = 1.fdiv(opts[:duration]) * opts[:gain] if opts[:fade_out]
frequency   = opts[:frequency]
sample_rate = 48000

{
  id:               (new_id! args),
  frequency:        frequency,
  sample_rate:      48000,
  stop_at:          args.tick_count + opts[:queue_in] + opts[:duration],
  gain:             opts[:gain].to_f,
  queue_at:         args.state.tick_count + opts[:queue_in],
  decay_rate:       decay_rate,
  pitch:            1.0,
  looping:          true,
  paused:           false
}
end

def queue_audio args, opts = {}
#graph_wave args, opts[:wave], opts[:audio_state][:frequency]
args.state.audio_queue << opts[:audio_state]
end

def play_sine_wave args, sender
  queue_sine_wave args,
                  frequency: sender[:frequency],
                  duration: 1.seconds,
                  fade_out: false
end

def new_id! args
  args.state.audio_id ||= 0
  args.state.audio_id  += 1
end

def process_audio_queue args
  to_queue = args.state.audio_queue.find_all { |v| v[:queue_at] <= args.tick_count }
  args.state.audio_queue -= to_queue
  to_queue.each { |a| args.audio[a[:id]] = a }

  args.audio.find_all { |k, v| v[:decay_rate] }
    .each     { |k, v| v[:gain] -= v[:decay_rate] }

  sounds_to_stop = args.audio
                     .find_all { |k, v| v[:stop_at] && args.state.tick_count >= v[:stop_at] }
                     .map { |k, v| k }

  sounds_to_stop.each { |k| args.audio.delete k }
end

def tick args
  args.state.data_x_planar ||=  []
  args.state.ri = 0.8
  args.state.audio_queue     ||= []
  args.state.sine_waves      ||= {}
  args.outputs.labels << [500,500, $new_way.phi(args.state.ri), 3, 1]
  args.outputs.labels << [500,400, $new_way.phi(0.8), 3, 1]
  args.state.data ||= [generator(args.state.ri) ]
  args.state.data << generator(args.state.data[0]) unless args.state.data.size() >= 2
  args.state.data = normalizer($new_way.function(args.state.data, args.state.ri)) unless args.state.data.size() > 2
  args.outputs.labels  << [470, 520, "#{args.state.data}", 1, 1]
  process_audio_queue(args)
  new_audio_state args, defaults_new_audio_state
  play_sine_wave args, args.state.sine_waves
end
